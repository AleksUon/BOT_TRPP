import logging
from datetime import time
from typing import Dict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
(
    STATE_NONE,
    STATE_WRITING_SITUATION,
    STATE_WRITING_THOUGHTS,
    STATE_WRITING_EMOTIONS,
    STATE_WRITING_SENSATIONS,
    STATE_WRITING_ACTIONS,
    STATE_WRITING_DESIRES,
    STATE_WRITING_MEALS,
) = range(8)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, Dict] = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    user_data[user.id] = {
        'state': STATE_NONE,
        'journal_entry': {},
        'meals_entry': None,
    }

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=get_main_keyboard()
    )


def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫", callback_data='journal_entry')],
        [InlineKeyboardButton("üçé –ü–∏—Ç–∞–Ω–∏–µ", callback_data='meals_entry')],
        [InlineKeyboardButton("üìä –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å", callback_data='daily_report')],
    ]
    return InlineKeyboardMarkup(keyboard)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if user_id not in user_data:
        user_data[user_id] = {
            'state': STATE_NONE,
            'journal_entry': {},
            'meals_entry': None,
        }

    if query.data == 'journal_entry':
        user_data[user_id]['state'] = STATE_WRITING_SITUATION
        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å:")
    elif query.data == 'meals_entry':
        user_data[user_id]['state'] = STATE_WRITING_MEALS
        await query.edit_message_text("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã –ø–æ–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è?")
    elif query.data == 'daily_report':
        await send_daily_report(user_id, context)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.message.from_user
    text = update.message.text

    if user.id not in user_data:
        user_data[user.id] = {
            'state': STATE_NONE,
            'journal_entry': {},
            'meals_entry': None,
        }

    state = user_data[user.id]['state']

    if state == STATE_WRITING_SITUATION:
        user_data[user.id]['journal_entry']['situation'] = text
        user_data[user.id]['state'] = STATE_WRITING_THOUGHTS
        await update.message.reply_text("–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?")

    elif state == STATE_WRITING_THOUGHTS:
        user_data[user.id]['journal_entry']['thoughts'] = text
        user_data[user.id]['state'] = STATE_WRITING_EMOTIONS
        await update.message.reply_text("–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª–∏?")

    elif state == STATE_WRITING_EMOTIONS:
        user_data[user.id]['journal_entry']['emotions'] = text
        user_data[user.id]['state'] = STATE_WRITING_SENSATIONS
        await update.message.reply_text("–ö–∞–∫–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏?")

    elif state == STATE_WRITING_SENSATIONS:
        user_data[user.id]['journal_entry']['sensations'] = text
        user_data[user.id]['state'] = STATE_WRITING_ACTIONS
        await update.message.reply_text("–ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?")

    elif state == STATE_WRITING_ACTIONS:
        user_data[user.id]['journal_entry']['actions'] = text
        user_data[user.id]['state'] = STATE_WRITING_DESIRES
        await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?")

    elif state == STATE_WRITING_DESIRES:
        user_data[user.id]['journal_entry']['desires'] = text
        user_data[user.id]['state'] = STATE_NONE
        await update.message.reply_text(
            "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!",
            reply_markup=get_main_keyboard()
        )

    elif state == STATE_WRITING_MEALS:
        if text.isdigit():
            user_data[user.id]['meals_entry'] = int(text)
            user_data[user.id]['state'] = STATE_NONE
            await update.message.reply_text(
                f"–ó–∞–ø–∏—Å–∞–Ω–æ {text} –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏.",
                reply_markup=get_main_keyboard()
            )
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


async def send_daily_report(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å"""
    if user_id not in user_data:
        return

    report = "üìä –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å\n\n"

    if user_data[user_id]['journal_entry']:
        report += "üìù –î–Ω–µ–≤–Ω–∏–∫:\n"
        for key, value in user_data[user_id]['journal_entry'].items():
            report += f"‚Ä¢ {key.capitalize()}: {value}\n"
        report += "\n"
    else:
        report += "üìù –î–Ω–µ–≤–Ω–∏–∫: –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π\n\n"

    if user_data[user_id]['meals_entry'] is not None:
        report += f"üçé –ü–∏—Ç–∞–Ω–∏–µ: {user_data[user_id]['meals_entry']} –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏\n"
    else:
        report += "üçé –ü–∏—Ç–∞–Ω–∏–µ: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    await context.bot.send_message(
        chat_id=user_id,
        text=report,
        reply_markup=get_main_keyboard()
    )


async def morning_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    for user_id in user_data:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–∏–∫.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def evening_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    for user_id in user_data:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application —Å —Ç–æ–∫–µ–Ω–æ–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = (
        Application.builder()
        .token("7200943849:AAEAKQlY8wt9yFh_KX4Z1CAkOUznOD8RarU")
        .build()
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ JobQueue –¥–æ—Å—Ç—É–ø–µ–Ω)
    if hasattr(application, 'job_queue') and application.job_queue:
        application.job_queue.run_daily(morning_reminder, time=time(hour=9, minute=0), days=tuple(range(7)))
        application.job_queue.run_daily(evening_reminder, time=time(hour=21, minute=0), days=tuple(range(7)))
    else:
        logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()