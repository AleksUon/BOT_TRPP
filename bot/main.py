import logging
from datetime import datetime, time, date
from typing import Dict

import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
(
    STATE_NONE,
    STATE_WRITING_SITUATION,
    STATE_WRITING_THOUGHTS,
    STATE_WRITING_EMOTIONS,
    STATE_WRITING_SENSATIONS,
    STATE_WRITING_ACTIONS,
    STATE_WRITING_DESIRES,
    STATE_WRITING_MEALS_COUNT,  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    STATE_WRITING_MEALS_COMMENT,  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ –ø–∏—Ç–∞–Ω–∏–∏
    STATE_SELECTING_REPORT_DATE,
) = range(10)


def init_db():
    conn = sqlite3.connect('journal.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS journal_entries (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        date TEXT NOT NULL,
        situation TEXT,
        thoughts TEXT,
        emotions TEXT,
        sensations TEXT,
        actions TEXT,
        desires TEXT
    )
    ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS meal_entries (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        date TEXT NOT NULL,
        meals_count INTEGER,
        comments TEXT
    )
    ''')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ comments –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    cursor.execute("PRAGMA table_info(meal_entries)")
    columns = [column[1] for column in cursor.fetchall()]
    if 'comments' not in columns:
        cursor.execute("ALTER TABLE meal_entries ADD COLUMN comments TEXT")

    conn.commit()
    conn.close()


init_db()


def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫", callback_data='journal_entry')],
        [InlineKeyboardButton("üçé –ü–∏—Ç–∞–Ω–∏–µ", callback_data='meals_entry')],
        [InlineKeyboardButton("üìä –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å", callback_data='daily_report')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_emotions_keyboard():
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–º–æ—Ü–∏–π —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    emotions_groups = {
        "üòä –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ": [
            "–†–∞–¥–æ—Å—Ç—å", "–°—á–∞—Å—Ç—å–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "–í–æ—Å—Ç–æ—Ä–≥",
            "–õ—é–±–æ–≤—å", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", "–ì–æ—Ä–¥–æ—Å—Ç—å", "–ù–∞–¥–µ–∂–¥–∞",
            "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–£–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–í–æ–ª–Ω–µ–Ω–∏–µ"
        ],
        "üò¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ": [
            "–ì—Ä—É—Å—Ç—å", "–ó–ª–æ—Å—Ç—å", "–°—Ç—Ä–∞—Ö", "–†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ",
            "–¢—Ä–µ–≤–æ–≥–∞", "–°—Ç—Ä–µ—Å—Å", "–í–∏–Ω–∞", "–°—Ç—ã–¥",
            "–û–±–∏–¥–∞", "–û—Ç—á–∞—è–Ω–∏–µ", "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "–ó–∞–≤–∏—Å—Ç—å"
        ],
        "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ": [
            "–£–¥–∏–≤–ª–µ–Ω–∏–µ", "–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ", "–†–∞–≤–Ω–æ–¥—É—à–∏–µ",
            "–°–∫—É–∫–∞", "–ó–∞–¥—É–º—á–∏–≤–æ—Å—Ç—å", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å"
        ],
        "üí™ –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–µ": [
            "–≠–Ω—Ç—É–∑–∏–∞–∑–º", "–†–µ—à–∏–º–æ—Å—Ç—å", "–ê–∑–∞—Ä—Ç",
            "–î—Ä–∞–π–≤", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è", "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ—Å—Ç—å"
        ],
        "üò¥ –£—Å—Ç–∞–ª—ã–µ": [
            "–£—Å—Ç–∞–ª–æ—Å—Ç—å", "–ê–ø–∞—Ç–∏—è", "–ò–∑–Ω–µ–º–æ–∂–µ–Ω–∏–µ",
            "–°–æ–Ω–ª–∏–≤–æ—Å—Ç—å", "–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ—Å—Ç—å", "–ò—Å—Ç–æ—â–µ–Ω–∏–µ"
        ]
    }

    keyboard = []

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —ç–º–æ—Ü–∏–π
    for group_name, emotions in emotions_groups.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã
        keyboard.append([InlineKeyboardButton(group_name, callback_data=f"emotion_group_{group_name[2:]}")])

        # –†–∞–∑–±–∏–≤–∞–µ–º —ç–º–æ—Ü–∏–∏ –Ω–∞ —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
        row = []
        for i, emotion in enumerate(emotions, 1):
            row.append(InlineKeyboardButton(f"{emotion}", callback_data=f"emotion_{emotion}"))
            if i % 3 == 0 or i == len(emotions):
                keyboard.append(row)
                row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
    keyboard.append([
        InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="emotions_done")
    ])

    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=get_main_keyboard()
    )
    return STATE_NONE

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = """
    üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    /reset - –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
    - üìù –ó–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ - –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è
    - üçé –ü–∏—Ç–∞–Ω–∏–µ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏
    - üìä –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å - –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏

    –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.
    """

    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(help_text, parse_mode='HTML', reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=get_main_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == 'journal_entry':
        context.user_data.clear()
        context.user_data['state'] = STATE_WRITING_SITUATION
        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å:")
        return STATE_WRITING_SITUATION
    elif query.data == 'meals_entry':
        context.user_data.clear()
        context.user_data['state'] = STATE_WRITING_MEALS_COUNT  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ STATE_WRITING_MEALS_COUNT
        await query.edit_message_text("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã –ø–æ–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è?")
        return STATE_WRITING_MEALS_COUNT
    elif query.data == 'daily_report':
        keyboard = [
            [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data='report_today')],
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data='select_date')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        await query.edit_message_text(
            "–ó–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return STATE_SELECTING_REPORT_DATE
    elif query.data == 'report_today':
        today = date.today().isoformat()
        await send_daily_report(user_id, context, today)
        return STATE_NONE
    elif query.data == 'select_date':
        context.user_data['state'] = STATE_SELECTING_REPORT_DATE
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-11-15):")
        return STATE_SELECTING_REPORT_DATE
    elif query.data == 'back_to_main':
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard())
        return STATE_NONE
    elif query.data == 'help':
        await help_command(update, context)
        return STATE_NONE
    elif query.data.startswith('emotion_'):
        emotion = query.data.split('_')[1]
        if 'selected_emotions' not in context.user_data:
            context.user_data['selected_emotions'] = []

        if emotion in context.user_data['selected_emotions']:
            context.user_data['selected_emotions'].remove(emotion)
        else:
            context.user_data['selected_emotions'].append(emotion)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–º–æ—Ü–∏–π
        selected = ", ".join(
            context.user_data['selected_emotions']) if 'selected_emotions' in context.user_data else "–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ"
        await query.edit_message_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏–∏ (–≤—ã–±—Ä–∞–Ω–æ: {selected}):",
            reply_markup=get_emotions_keyboard())
        return STATE_WRITING_EMOTIONS
    elif query.data == 'emotions_done':
        if 'selected_emotions' in context.user_data and context.user_data['selected_emotions']:
            emotions_text = ", ".join(context.user_data['selected_emotions'])
            context.user_data['journal_entry']['emotions'] = emotions_text
            await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏: {emotions_text}")

            context.user_data['state'] = STATE_WRITING_SENSATIONS
            await context.bot.send_message(
                chat_id=user_id,
                text="–ö–∞–∫–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏?")
            return STATE_WRITING_SENSATIONS
        else:
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —ç–º–æ—Ü–∏—é")
            return STATE_WRITING_EMOTIONS
    elif query.data.startswith('emotion_group_'):
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await query.answer(f"–ì—Ä—É–ø–ø–∞ —ç–º–æ—Ü–∏–π: {query.data.split('_')[2]}")
        return STATE_WRITING_EMOTIONS

    return STATE_NONE

async def handle_journal_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    text = update.message.text
    user_id = user.id

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = context.user_data.get('state', STATE_WRITING_SITUATION)
    logger.info(f"Current state: {current_state}, User: {user_id}, Text: {text}")

    if current_state == STATE_WRITING_SITUATION:
        context.user_data['journal_entry'] = {
            'user_id': user_id,
            'date': date.today().isoformat(),
            'situation': text
        }
        context.user_data['state'] = STATE_WRITING_THOUGHTS
        await update.message.reply_text("–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?")
        return STATE_WRITING_THOUGHTS

    elif current_state == STATE_WRITING_THOUGHTS:
        if 'journal_entry' not in context.user_data:
            context.user_data['journal_entry'] = {'user_id': user_id, 'date': date.today().isoformat()}

        context.user_data['journal_entry']['thoughts'] = text
        context.user_data['state'] = STATE_WRITING_EMOTIONS

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —ç–º–æ—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_emotions_keyboard())
        return STATE_WRITING_EMOTIONS

    elif current_state == STATE_WRITING_SENSATIONS:
        context.user_data['journal_entry']['sensations'] = text
        context.user_data['state'] = STATE_WRITING_ACTIONS
        await update.message.reply_text("–ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?")
        return STATE_WRITING_ACTIONS

    elif current_state == STATE_WRITING_ACTIONS:
        context.user_data['journal_entry']['actions'] = text
        context.user_data['state'] = STATE_WRITING_DESIRES
        await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?")
        return STATE_WRITING_DESIRES

    elif current_state == STATE_WRITING_DESIRES:
        context.user_data['journal_entry']['desires'] = text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('journal.db')
        cursor = conn.cursor()
        entry = context.user_data['journal_entry']

        cursor.execute('''
        INSERT INTO journal_entries 
        (user_id, date, situation, thoughts, emotions, sensations, actions, desires)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            entry['user_id'],
            entry['date'],
            entry['situation'],
            entry['thoughts'],
            entry['emotions'],
            entry['sensations'],
            entry['actions'],
            entry['desires']
        ))

        conn.commit()
        conn.close()

        await update.message.reply_text(
            "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!",
            reply_markup=get_main_keyboard())
        return STATE_NONE

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text(
        "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard())
    return STATE_NONE

async def handle_meals_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏"""
    user = update.message.from_user
    text = update.message.text
    user_id = user.id

    if context.user_data.get('state') == STATE_WRITING_MEALS_COUNT:
        # –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
        if text.isdigit():
            meals_count = int(text)
            context.user_data['meals_count'] = meals_count
            context.user_data['state'] = STATE_WRITING_MEALS_COMMENT

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏
            await update.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ —Å–≤–æ–µ–º –ø–∏—Ç–∞–Ω–∏–∏ —Å–µ–≥–æ–¥–Ω—è? "
                "(–ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ –µ–ª–∏, –∫–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –ø–æ—Å–ª–µ –µ–¥—ã –∏ —Ç.–¥.)\n"
                "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
            )
            return STATE_WRITING_MEALS_COMMENT
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return STATE_WRITING_MEALS_COUNT

    elif context.user_data.get('state') == STATE_WRITING_MEALS_COMMENT:
        # –≠—Ç–∞–ø –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ –ø–∏—Ç–∞–Ω–∏–∏
        comments = text if text.lower() != '–Ω–µ—Ç' else None
        meals_count = context.user_data['meals_count']

        conn = sqlite3.connect('journal.db')
        cursor = conn.cursor()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        cursor.execute('''
        DELETE FROM meal_entries 
        WHERE user_id = ? AND date = ?
        ''', (user_id, date.today().isoformat()))

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        cursor.execute('''
        INSERT INTO meal_entries (user_id, date, meals_count, comments)
        VALUES (?, ?, ?, ?)
        ''', (user_id, date.today().isoformat(), meals_count, comments))

        conn.commit()
        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = f"–ó–∞–ø–∏—Å–∞–Ω–æ {meals_count} –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏."
        if comments:
            response += f"\n\n–í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n{comments}"

        await update.message.reply_text(
            response,
            reply_markup=get_main_keyboard())

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del context.user_data['meals_count']
        return STATE_NONE

async def handle_report_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    text = update.message.text
    user_id = user.id

    try:
        selected_date = datetime.strptime(text, '%Y-%m-%d').date().isoformat()
        await send_daily_report(user_id, context, selected_date)
        return STATE_NONE
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-11-15):")
        return STATE_SELECTING_REPORT_DATE

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏
async def send_daily_report(user_id: int, context: ContextTypes.DEFAULT_TYPE, report_date: str) -> None:
    conn = sqlite3.connect('journal.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
    cursor.execute('''
    SELECT situation, thoughts, emotions, sensations, actions, desires
    FROM journal_entries
    WHERE user_id = ? AND date = ?
    ''', (user_id, report_date))
    journal_entries = cursor.fetchall()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ (—Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
    cursor.execute('''
    SELECT meals_count, comments
    FROM meal_entries
    WHERE user_id = ? AND date = ?
    ''', (user_id, report_date))
    meal_entry = cursor.fetchone()
    conn.close()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
    report_date_obj = datetime.strptime(report_date, '%Y-%m-%d').date()
    today = date.today()

    if report_date_obj == today:
        date_str = "—Å–µ–≥–æ–¥–Ω—è"
    elif report_date_obj == today.replace(day=today.day - 1):
        date_str = "–≤—á–µ—Ä–∞"
    else:
        date_str = f"–∑–∞ {report_date_obj.strftime('%d.%m.%Y')}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = f"üìä –û—Ç—á—ë—Ç {date_str}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
    if journal_entries:
        report += "üìù –ó–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞:\n\n"
        for i, entry in enumerate(journal_entries, 1):
            report += f"–ó–∞–ø–∏—Å—å #{i}:\n"
            report += f"‚Ä¢ –°–∏—Ç—É–∞—Ü–∏—è: {entry[0]}\n"
            report += f"‚Ä¢ –ú—ã—Å–ª–∏: {entry[1]}\n"
            report += f"‚Ä¢ –≠–º–æ—Ü–∏–∏: {entry[2]}\n"
            report += f"‚Ä¢ –û—â—É—â–µ–Ω–∏—è: {entry[3]}\n"
            report += f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è: {entry[4]}\n"
            report += f"‚Ä¢ –ñ–µ–ª–∞–Ω–∏—è: {entry[5]}\n\n"
    else:
        report += "üìù –ó–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–µ—Ç\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–∞–Ω–∏–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    if meal_entry:
        report += f"üçé –ü–∏—Ç–∞–Ω–∏–µ: {meal_entry[0]} –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏\n"
        if meal_entry[1]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            report += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏:\n{meal_entry[1]}\n"
    else:
        report += "üçé –î–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏ –Ω–µ—Ç\n"

    await context.bot.send_message(
        chat_id=user_id,
        text=report,
        reply_markup=get_main_keyboard()
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=get_main_keyboard()
    )
    return STATE_NONE

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
        reply_markup=get_main_keyboard()
    )
    return STATE_NONE

async def morning_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    conn = sqlite3.connect('journal.db')
    cursor = conn.cursor()
    cursor.execute('SELECT DISTINCT user_id FROM journal_entries UNION SELECT DISTINCT user_id FROM meal_entries')
    user_ids = [row[0] for row in cursor.fetchall()]
    conn.close()

    for user_id in user_ids:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–∏–∫.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def evening_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    conn = sqlite3.connect('journal.db')
    cursor = conn.cursor()
    cursor.execute('SELECT DISTINCT user_id FROM journal_entries UNION SELECT DISTINCT user_id FROM meal_entries')
    user_ids = [row[0] for row in cursor.fetchall()]
    conn.close()

    for user_id in user_ids:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def main() -> None:
    application = Application.builder().token("7200943849:AAEAKQlY8wt9yFh_KX4Z1CAkOUznOD8RarU").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            STATE_NONE: [
                CallbackQueryHandler(button_handler),
                CommandHandler('help', help_command),
            ],
            STATE_WRITING_SITUATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_journal_entry),
                CommandHandler('cancel', cancel),
            ],
            STATE_WRITING_THOUGHTS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_journal_entry),
                CommandHandler('cancel', cancel),
            ],
            STATE_WRITING_EMOTIONS: [
                CallbackQueryHandler(button_handler),
                CommandHandler('cancel', cancel),
            ],
            STATE_WRITING_SENSATIONS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_journal_entry),
                CommandHandler('cancel', cancel),
            ],
            STATE_WRITING_ACTIONS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_journal_entry),
                CommandHandler('cancel', cancel),
            ],
            STATE_WRITING_DESIRES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_journal_entry),
                CommandHandler('cancel', cancel),
            ],
            STATE_WRITING_MEALS_COUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_meals_entry),
                CommandHandler('cancel', cancel),
            ],
            STATE_WRITING_MEALS_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_meals_entry),
                CommandHandler('cancel', cancel),
            ],
            STATE_SELECTING_REPORT_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_report_date_selection),
                CallbackQueryHandler(button_handler),
                CommandHandler('cancel', cancel),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('reset', reset),
            CommandHandler('help', help_command),
        ],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('reset', reset))
    application.add_handler(CommandHandler('help', help_command))

    if hasattr(application, 'job_queue') and application.job_queue:
        application.job_queue.run_daily(morning_reminder, time=time(hour=9, minute=0), days=tuple(range(7)))
        application.job_queue.run_daily(evening_reminder, time=time(hour=21, minute=0), days=tuple(range(7)))
    else:
        logger.warning("JobQueue –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

    application.run_polling()

if __name__ == '__main__':
    main()